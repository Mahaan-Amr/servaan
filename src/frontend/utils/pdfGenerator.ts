import jsPDF from 'jspdf';

interface AnalyticsSummary {
  totalItems: number;
  lowStockCount: number;
  recentTransactions: number;
  totalInventoryValue: number;
}

interface CategoryData {
  name: string;
  value: number;
  color: string;
}

interface TrendData {
  date: string;
  stock: number;
  totalIn: number;
  totalOut: number;
}

interface MonthlyData {
  month: string;
  monthKey: string;
  in: number;
  out: number;
  net: number;
}

interface ReportData {
  summary: AnalyticsSummary;
  categoryData: CategoryData[];
  trendData: TrendData[];
  monthlyData: MonthlyData[];
  generatedAt: string;
  period: string;
}

// Helper function to convert Persian numbers to English
const convertPersianNumbers = (text: string): string => {
  const persianNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];
  const englishNumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  
  let result = text;
  persianNumbers.forEach((persian, index) => {
    result = result.replace(new RegExp(persian, 'g'), englishNumbers[index]);
  });
  
  return result;
};

// Helper function to format numbers with English digits
const formatNumber = (num: number): string => {
  return num.toLocaleString('en-US');
};

// Bilingual text mapping
const bilingualText = {
  title: { en: 'Comprehensive Inventory Report', fa: 'گزارش جامع موجودی' },
  summary: { en: 'Executive Summary', fa: 'خلاصه اجرایی' },
  totalItems: { en: 'Total Items', fa: 'کل کالاها' },
  lowStockItems: { en: 'Low Stock Items', fa: 'کالاهای کم موجود' },
  recentTransactions: { en: 'Recent Transactions', fa: 'تراکنش‌های اخیر' },
  totalInventoryValue: { en: 'Total Inventory Value', fa: 'ارزش کل موجودی' },
  categoryDistribution: { en: 'Category Distribution', fa: 'توزیع دسته‌بندی' },
  recentTrend: { en: 'Recent Inventory Trend', fa: 'روند موجودی اخیر' },
  monthlyTrend: { en: 'Monthly Trend', fa: 'روند ماهانه' },
  date: { en: 'Date', fa: 'تاریخ' },
  input: { en: 'Input', fa: 'ورودی' },
  output: { en: 'Output', fa: 'خروجی' },
  stock: { en: 'Stock', fa: 'موجودی' },
  month: { en: 'Month', fa: 'ماه' },
  net: { en: 'Net', fa: 'خالص' },
  generatedBy: { en: 'Generated by Servaan', fa: 'تولید شده توسط سروان' },
  cafeGolestan: { en: 'Cafe Golestan - Smart Management System', fa: 'کافه گلستان - سیستم مدیریت هوشمند' }
};

export const generateInventoryPDF = (data: ReportData): void => {
  const doc = new jsPDF();
  
  // Set font for better Persian text support
  doc.setFont('helvetica');
  doc.setFontSize(18);
  
  // Title with border
  doc.setDrawColor(59, 130, 246); // Blue color
  doc.setLineWidth(0.5);
  doc.rect(10, 10, 190, 25);
  doc.text('Inventory Report', 105, 25, { align: 'center' });
  
  // Subtitle
  doc.setFontSize(12);
  doc.setTextColor(107, 114, 128); // Gray color
  doc.text(`Generated: ${new Date(data.generatedAt).toLocaleDateString('en-US')}`, 105, 40, { align: 'center' });
  doc.text(`Period: ${data.period}`, 105, 50, { align: 'center' });
  
  // Summary Section
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text('Summary', 20, 70);
  
  // Summary box
  doc.setDrawColor(229, 231, 235);
  doc.setFillColor(249, 250, 251);
  doc.rect(15, 75, 180, 40, 'F');
  doc.rect(15, 75, 180, 40);
  
  doc.setFontSize(10);
  doc.text(`Total Items: ${formatNumber(data.summary.totalItems)}`, 25, 85);
  doc.text(`Low Stock Items: ${formatNumber(data.summary.lowStockCount)}`, 25, 95);
  doc.text(`Recent Transactions: ${formatNumber(data.summary.recentTransactions)}`, 25, 105);
  doc.text(`Total Inventory Value: ${formatNumber(data.summary.totalInventoryValue)} Toman`, 25, 115);
  
  // Category Breakdown
  doc.setFontSize(14);
  doc.text('Category Distribution', 20, 135);
  
  // Category table
  doc.setDrawColor(229, 231, 235);
  doc.setFillColor(249, 250, 251);
  doc.rect(15, 140, 180, 10, 'F');
  doc.rect(15, 140, 180, 10);
  doc.setFontSize(10);
  doc.text('Category', 25, 147);
  doc.text('Percentage', 160, 147);
  
  doc.setFontSize(10);
  let yPos = 155;
  data.categoryData.forEach((category, index) => {
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
    
    // Category row
    doc.rect(15, yPos - 5, 180, 10);
    doc.text(category.name, 25, yPos);
    doc.text(`${category.value}%`, 160, yPos);
    
    // Progress bar
    const barWidth = (category.value / 100) * 120;
    doc.setFillColor(59, 130, 246);
    doc.rect(25, yPos + 2, barWidth, 3, 'F');
    
    yPos += 15;
  });
  
  // Recent Trend
  doc.addPage();
  doc.setFontSize(14);
  doc.text('Recent Inventory Trend', 20, 20);
  
  // Trend table header
  doc.setDrawColor(229, 231, 235);
  doc.setFillColor(249, 250, 251);
  doc.rect(15, 25, 180, 10, 'F');
  doc.rect(15, 25, 180, 10);
  doc.setFontSize(10);
  doc.text('Date', 25, 32);
  doc.text('Input', 80, 32);
  doc.text('Output', 120, 32);
  doc.text('Stock', 160, 32);
  
  doc.setFontSize(10);
  yPos = 40;
  data.trendData.slice(0, 15).forEach((trend, index) => {
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
    
    // Trend row
    doc.rect(15, yPos - 5, 180, 10);
    doc.text(trend.date, 25, yPos);
    doc.text(trend.totalIn.toString(), 80, yPos);
    doc.text(trend.totalOut.toString(), 120, yPos);
    doc.text(trend.stock.toString(), 160, yPos);
    
    yPos += 12;
  });
  
  // Monthly Trend
  doc.setFontSize(14);
  doc.text('Monthly Trend', 20, yPos + 10);
  
  // Monthly table header
  doc.setDrawColor(229, 231, 235);
  doc.setFillColor(249, 250, 251);
  doc.rect(15, yPos + 5, 180, 10, 'F');
  doc.rect(15, yPos + 5, 180, 10);
  doc.setFontSize(10);
  doc.text('Month', 25, yPos + 12);
  doc.text('Input', 80, yPos + 12);
  doc.text('Output', 120, yPos + 12);
  doc.text('Net', 160, yPos + 12);
  
  doc.setFontSize(10);
  yPos += 25;
  data.monthlyData.forEach((month, index) => {
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
    
    // Monthly row
    doc.rect(15, yPos - 5, 180, 10);
    doc.text(month.month, 25, yPos);
    doc.text(month.in.toString(), 80, yPos);
    doc.text(month.out.toString(), 120, yPos);
    doc.text(`${month.net >= 0 ? '+' : ''}${month.net}`, 160, yPos);
    
    yPos += 12;
  });
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(107, 114, 128);
  doc.text('Cafe Golestan - Smart Management System', 105, 280, { align: 'center' });
  doc.text('Generated by Servaan', 105, 285, { align: 'center' });
  
  // Save the PDF
  const fileName = `Inventory_Report_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const generateSimplePDF = (title: string, content: string): void => {
  const doc = new jsPDF();
  
  doc.setFont('helvetica');
  doc.setFontSize(16);
  doc.text(title, 105, 20, { align: 'center' });
  
  doc.setFontSize(12);
  const lines = doc.splitTextToSize(content, 180);
  doc.text(lines, 20, 40);
  
  const fileName = `${title}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

// Enhanced PDF generator with better formatting and English text
export const generateEnhancedInventoryPDF = (data: ReportData): void => {
  const doc = new jsPDF();
  
  // Cover page
  doc.setFillColor(59, 130, 246);
  doc.rect(0, 0, 210, 297, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text('Comprehensive Inventory Report', 105, 120, { align: 'center' });
  
  doc.setFontSize(14);
  doc.text('Cafe Golestan', 105, 140, { align: 'center' });
  doc.text(`Date: ${new Date(data.generatedAt).toLocaleDateString('en-US')}`, 105, 160, { align: 'center' });
  doc.text(`Period: ${data.period}`, 105, 170, { align: 'center' });
  
  // Page 2 - Executive Summary
  doc.addPage();
  doc.setFillColor(255, 255, 255);
  doc.rect(0, 0, 210, 297, 'F');
  
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(18);
  doc.text('Executive Summary', 20, 30);
  
  // Summary cards
  const summaryCards = [
    { title: 'Total Items', value: data.summary.totalItems, color: [59, 130, 246] },
    { title: 'Low Stock Items', value: data.summary.lowStockCount, color: [239, 68, 68] },
    { title: 'Recent Transactions', value: data.summary.recentTransactions, color: [34, 197, 94] },
    { title: 'Total Inventory Value', value: `${formatNumber(data.summary.totalInventoryValue)} Toman`, color: [168, 85, 247] }
  ];
  
  let cardY = 50;
  summaryCards.forEach((card, index) => {
    if (index % 2 === 0 && index > 0) {
      cardY += 40;
    }
    
    const x = index % 2 === 0 ? 20 : 110;
    
    doc.setFillColor(card.color[0], card.color[1], card.color[2]);
    doc.rect(x, cardY, 80, 30, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text(card.title, x + 40, cardY + 10, { align: 'center' });
    doc.setFontSize(12);
    doc.text(card.value.toString(), x + 40, cardY + 20, { align: 'center' });
  });
  
  // Category breakdown
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(16);
  doc.text('Category Distribution', 20, cardY + 60);
  
  doc.setFontSize(10);
  let categoryY = cardY + 75;
  data.categoryData.forEach((category, index) => {
    if (categoryY > 250) {
      doc.addPage();
      categoryY = 30;
    }
    
    doc.text(`${category.name}: ${category.value}%`, 25, categoryY);
    
    // Progress bar
    const barWidth = (category.value / 100) * 150;
    doc.setDrawColor(229, 231, 235);
    doc.rect(25, categoryY + 2, 150, 5);
    doc.setFillColor(category.color);
    doc.rect(25, categoryY + 2, barWidth, 5, 'F');
    
    categoryY += 15;
  });
  
  // Recent trends
  doc.addPage();
  doc.setFontSize(16);
  doc.text('Recent Inventory Trends', 20, 30);
  
  doc.setFontSize(10);
  let trendY = 50;
  data.trendData.slice(0, 10).forEach((trend, index) => {
    if (trendY > 250) {
      doc.addPage();
      trendY = 30;
    }
    
    doc.text(`${trend.date}: Input ${trend.totalIn} | Output ${trend.totalOut} | Stock ${trend.stock}`, 25, trendY);
    trendY += 12;
  });
  
  // Monthly trends
  doc.setFontSize(16);
  doc.text('Monthly Trends', 20, trendY + 20);
  
  doc.setFontSize(10);
  trendY += 35;
  data.monthlyData.forEach((month, index) => {
    if (trendY > 250) {
      doc.addPage();
      trendY = 30;
    }
    
    doc.text(`${month.month}: Input ${month.in} | Output ${month.out} | Net ${month.net >= 0 ? '+' : ''}${month.net}`, 25, trendY);
    trendY += 12;
  });
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(107, 114, 128);
  doc.text('Cafe Golestan - Smart Management System', 105, 280, { align: 'center' });
  doc.text('Generated by Servaan', 105, 285, { align: 'center' });
  
  // Save the enhanced PDF
  const fileName = `Enhanced_Inventory_Report_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}; 