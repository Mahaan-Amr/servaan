FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy the admin frontend source code
COPY . .

# Debug: Show what we copied
RUN echo "=== Contents of /app ===" && ls -la /app

# CRITICAL: Set environment variables for build time
# These will be embedded into the Next.js build
ENV NEXT_PUBLIC_API_URL=http://admin-backend:3003/api
ENV NEXT_PUBLIC_ADMIN_API_URL=http://admin-backend:3003/api
ENV NEXT_PUBLIC_APP_URL=https://admin.servaan.com

# Debug: Show environment variables before build
RUN echo "ðŸ”§ Build-time environment variables:"
RUN echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL"
RUN echo "NEXT_PUBLIC_ADMIN_API_URL=$NEXT_PUBLIC_ADMIN_API_URL"
RUN echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL"

# Build the application with explicit environment variables
RUN NEXT_PUBLIC_API_URL=http://admin-backend:3003/api \
    NEXT_PUBLIC_ADMIN_API_URL=http://admin-backend:3003/api \
    NEXT_PUBLIC_APP_URL=https://admin.servaan.com \
    npm run build

# Production stage
FROM node:18-alpine AS runner

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy package files first for dependency installation
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Install all dependencies (some dev deps are needed for production)
RUN npm ci && \
    echo "Installed packages:" && \
    npm list --depth=0 && \
    echo "Next.js version:" && \
    npx next --version

# Copy the standalone output (this is the key for standalone mode)
COPY --from=builder --chown=nodejs:nodejs /app/.next/standalone ./

# Copy static files to the correct location for standalone mode
COPY --from=builder --chown=nodejs:nodejs /app/.next/static ./.next/static

# Copy public directory if it exists
RUN mkdir -p ./public
COPY --from=builder --chown=nodejs:nodejs /app/public ./public

# Switch to non-root user
USER nodejs

# Expose port 3004 for admin frontend
EXPOSE 3004

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application using standalone server
CMD ["dumb-init", "sh", "-c", "PORT=3000 node server.js || echo 'Failed to start admin application'"]
