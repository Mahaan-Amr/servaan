"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/tenants/page",{

/***/ "(app-pages-browser)/./src/services/admin/tenants/tenantService.ts":
/*!*****************************************************!*\
  !*** ./src/services/admin/tenants/tenantService.ts ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activateTenant: function() { return /* binding */ activateTenant; },\n/* harmony export */   bulkUpdateTenantStatus: function() { return /* binding */ bulkUpdateTenantStatus; },\n/* harmony export */   checkSubdomainAvailability: function() { return /* binding */ checkSubdomainAvailability; },\n/* harmony export */   createTenant: function() { return /* binding */ createTenant; },\n/* harmony export */   deactivateTenant: function() { return /* binding */ deactivateTenant; },\n/* harmony export */   exportTenants: function() { return /* binding */ exportTenants; },\n/* harmony export */   getPlatformOverview: function() { return /* binding */ getPlatformOverview; },\n/* harmony export */   getTenantActivity: function() { return /* binding */ getTenantActivity; },\n/* harmony export */   getTenantById: function() { return /* binding */ getTenantById; },\n/* harmony export */   getTenantGrowthAnalytics: function() { return /* binding */ getTenantGrowthAnalytics; },\n/* harmony export */   getTenantGrowthData: function() { return /* binding */ getTenantGrowthData; },\n/* harmony export */   getTenantMetrics: function() { return /* binding */ getTenantMetrics; },\n/* harmony export */   getTenantRevenueAnalytics: function() { return /* binding */ getTenantRevenueAnalytics; },\n/* harmony export */   getTenants: function() { return /* binding */ getTenants; },\n/* harmony export */   listTenantUsers: function() { return /* binding */ listTenantUsers; },\n/* harmony export */   resetTenantUserPassword: function() { return /* binding */ resetTenantUserPassword; },\n/* harmony export */   updateTenant: function() { return /* binding */ updateTenant; }\n/* harmony export */ });\n/* harmony import */ var _adminAuthService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../adminAuthService */ \"(app-pages-browser)/./src/services/adminAuthService.ts\");\n// Tenant Service for Admin Frontend\n// سرویس مدیریت مستأجرین برای پنل مدیریت\n\n/**\r\n * Get list of all tenants with pagination and search\r\n */ const getTenants = async (params)=>{\n    try {\n        const queryParams = new URLSearchParams();\n        queryParams.append(\"page\", params.page.toString());\n        queryParams.append(\"limit\", params.limit.toString());\n        // Basic filters\n        if (params.search) queryParams.append(\"search\", params.search);\n        if (params.status) queryParams.append(\"status\", params.status);\n        if (params.plan) queryParams.append(\"plan\", params.plan);\n        if (params.sortBy) queryParams.append(\"sortBy\", params.sortBy);\n        if (params.sortDir) queryParams.append(\"sortDir\", params.sortDir);\n        if (params.refresh) queryParams.append(\"refresh\", String(params.refresh));\n        // Enhanced filters\n        if (params.businessType) queryParams.append(\"businessType\", params.businessType);\n        if (params.city) queryParams.append(\"city\", params.city);\n        if (params.country) queryParams.append(\"country\", params.country);\n        if (params.createdFrom) queryParams.append(\"createdFrom\", params.createdFrom);\n        if (params.createdTo) queryParams.append(\"createdTo\", params.createdTo);\n        if (params.revenueFrom !== undefined) queryParams.append(\"revenueFrom\", params.revenueFrom.toString());\n        if (params.revenueTo !== undefined) queryParams.append(\"revenueTo\", params.revenueTo.toString());\n        if (params.userCountFrom !== undefined) queryParams.append(\"userCountFrom\", params.userCountFrom.toString());\n        if (params.userCountTo !== undefined) queryParams.append(\"userCountTo\", params.userCountTo.toString());\n        if (params.hasFeatures && params.hasFeatures.length > 0) {\n            queryParams.append(\"hasFeatures\", params.hasFeatures.join(\",\"));\n        }\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants?\".concat(queryParams.toString()));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenants:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت لیست مستأجرین\");\n    }\n};\n/**\r\n * Get detailed information about a specific tenant\r\n */ const getTenantById = async (id)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/\".concat(id));\n        return response.data.data.tenant;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant details:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت جزئیات مستأجر\");\n    }\n};\n/**\r\n * Get detailed metrics for a specific tenant\r\n */ const getTenantMetrics = async (id)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/\".concat(id, \"/metrics\"));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant metrics:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت متریک‌های مستأجر\");\n    }\n};\n/**\r\n * Update tenant information\r\n */ const updateTenant = async (id, data)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/tenants/\".concat(id), data);\n        return response.data.data.tenant;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error updating tenant:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در به‌روزرسانی مستأجر\");\n    }\n};\n/**\r\n * Create a new tenant\r\n */ const createTenant = async (payload)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/admin/tenants\", payload);\n        return response.data.data.tenant;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        const message = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در ایجاد مستأجر\";\n        throw new Error(message);\n    }\n};\n/**\r\n * Deactivate a tenant (soft delete)\r\n */ const deactivateTenant = async (id)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/admin/tenants/\".concat(id));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error deactivating tenant:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در غیرفعال‌سازی مستأجر\");\n    }\n};\n/**\r\n * Activate a previously deactivated tenant\r\n */ const activateTenant = async (id)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/tenants/\".concat(id), {\n            isActive: true\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error activating tenant:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در فعال‌سازی مستأجر\");\n    }\n};\n/**\r\n * Get tenant growth data for analytics\r\n */ const getTenantGrowthData = async function() {\n    let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/growth?days=\".concat(days));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant growth data:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت داده‌های رشد مستأجرین\");\n    }\n};\n/**\r\n * Get platform overview with tenant statistics\r\n */ const getPlatformOverview = async ()=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/overview\");\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching platform overview:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت نمای کلی پلتفرم\");\n    }\n};\n/**\r\n * Export tenants data\r\n */ const exportTenants = async (format, filters, selectedTenants)=>{\n    try {\n        const queryParams = new URLSearchParams();\n        queryParams.append(\"format\", format);\n        // Add all enhanced filters\n        if (filters) {\n            if (filters.search) queryParams.append(\"search\", filters.search);\n            if (filters.status) queryParams.append(\"status\", filters.status);\n            if (filters.plan) queryParams.append(\"plan\", filters.plan);\n            if (filters.businessType) queryParams.append(\"businessType\", filters.businessType);\n            if (filters.city) queryParams.append(\"city\", filters.city);\n            if (filters.country) queryParams.append(\"country\", filters.country);\n            if (filters.createdFrom) queryParams.append(\"createdFrom\", filters.createdFrom);\n            if (filters.createdTo) queryParams.append(\"createdTo\", filters.createdTo);\n            if (filters.revenueFrom !== undefined) queryParams.append(\"revenueFrom\", filters.revenueFrom.toString());\n            if (filters.revenueTo !== undefined) queryParams.append(\"revenueTo\", filters.revenueTo.toString());\n            if (filters.userCountFrom !== undefined) queryParams.append(\"userCountFrom\", filters.userCountFrom.toString());\n            if (filters.userCountTo !== undefined) queryParams.append(\"userCountTo\", filters.userCountTo.toString());\n            if (filters.hasFeatures && filters.hasFeatures.length > 0) {\n                queryParams.append(\"hasFeatures\", filters.hasFeatures.join(\",\"));\n            }\n        }\n        // Add selected tenants if provided\n        if (selectedTenants && selectedTenants.length > 0) {\n            queryParams.append(\"selectedTenants\", selectedTenants.join(\",\"));\n        }\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/export?\".concat(queryParams.toString()), {\n            responseType: \"blob\"\n        });\n        // Create download link with better filename\n        const url = window.URL.createObjectURL(new Blob([\n            response.data\n        ]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        const timestamp = new Date().toISOString().split(\"T\")[0];\n        const tenantCount = selectedTenants ? selectedTenants.length : \"all\";\n        link.setAttribute(\"download\", \"tenants-export-\".concat(tenantCount, \"-\").concat(timestamp, \".\").concat(format));\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n        window.URL.revokeObjectURL(url);\n        return {\n            success: true\n        };\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error exporting tenants:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در صادرات داده‌ها\");\n    }\n};\n/**\r\n * Bulk update tenant status\r\n */ const bulkUpdateTenantStatus = async (tenantIds, isActive)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/admin/tenants/bulk-status\", {\n            tenantIds,\n            isActive\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error bulk updating tenant status:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در به‌روزرسانی وضعیت گروهی\");\n    }\n};\n/**\r\n * Get tenant activity logs\r\n */ const getTenantActivity = async (tenantId, params)=>{\n    try {\n        const queryParams = new URLSearchParams();\n        queryParams.append(\"page\", params.page.toString());\n        queryParams.append(\"limit\", params.limit.toString());\n        if (params.type) {\n            queryParams.append(\"type\", params.type);\n        }\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/\".concat(tenantId, \"/activity?\").concat(queryParams.toString()));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant activity:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت فعالیت‌های مستأجر\");\n    }\n};\n/**\r\n * Get tenant growth analytics\r\n */ const getTenantGrowthAnalytics = async function() {\n    let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30, groupBy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"day\";\n    try {\n        const queryParams = new URLSearchParams();\n        queryParams.append(\"days\", days.toString());\n        queryParams.append(\"groupBy\", groupBy);\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/analytics/growth?\".concat(queryParams.toString()));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant growth analytics:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت تحلیل رشد مستأجرین\");\n    }\n};\n/**\r\n * Get tenant revenue analytics\r\n */ const getTenantRevenueAnalytics = async function() {\n    let period = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"monthly\", year = arguments.length > 1 ? arguments[1] : void 0;\n    try {\n        const queryParams = new URLSearchParams();\n        queryParams.append(\"period\", period);\n        if (year) {\n            queryParams.append(\"year\", year.toString());\n        }\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/analytics/revenue?\".concat(queryParams.toString()));\n        return response.data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching tenant revenue analytics:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت تحلیل درآمد مستأجرین\");\n    }\n};\n/**\r\n * Check if subdomain is available\r\n */ const checkSubdomainAvailability = async (subdomain)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/check-subdomain/\".concat(encodeURIComponent(subdomain)));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error checking subdomain availability:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در بررسی زیردامنه\");\n    }\n};\n/**\r\n * Reset a tenant user's password by email\r\n */ const resetTenantUserPassword = async (tenantId, email, newPassword)=>{\n    try {\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/admin/tenants/\".concat(encodeURIComponent(tenantId), \"/users/reset-password\"), {\n            email,\n            newPassword\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error resetting tenant user password:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در بازنشانی رمز عبور کاربر مستأجر\");\n    }\n};\nconst listTenantUsers = async (tenantId, q)=>{\n    try {\n        var _response_data;\n        const response = await _adminAuthService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/admin/tenants/\".concat(encodeURIComponent(tenantId), \"/users\"), {\n            params: q ? {\n                q\n            } : undefined\n        });\n        return (_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error listing tenant users:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"خطا در دریافت لیست کاربران مستأجر\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/admin/tenants/tenantService.ts\n"));

/***/ })

});