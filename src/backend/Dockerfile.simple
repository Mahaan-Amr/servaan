FROM node:18-alpine AS builder

WORKDIR /app

# Install OpenSSL and other required libraries for Prisma
RUN apk add --no-cache openssl openssl-dev

# Copy package files
COPY src/backend/package*.json ./

# Install dependencies including ts-node for runtime TypeScript execution
RUN npm ci && npm install -g ts-node typescript

# Copy Prisma schema
COPY src/prisma ./prisma/

# Copy the ENTIRE project structure to maintain relative paths
COPY . .

# Change to backend directory
WORKDIR /app/src/backend

# Generate Prisma client from the correct location
WORKDIR /app/src/prisma
RUN npx prisma generate

# Return to backend directory
WORKDIR /app/src/backend

# Ensure shared files are available at both expected locations
RUN cp -r /app/src/shared /app/shared && \
    mkdir -p /app/src/backend/shared && \
    cp -r /app/src/shared/* /app/src/backend/shared/

# Debug: Show what we have
RUN echo "=== Current directory structure ===" && \
    ls -la && \
    echo "=== Shared directory ===" && \
    ls -la ../shared/ || echo "No ../shared found" && \
    echo "=== Backend shared directory ===" && \
    ls -la shared/ || echo "No shared found"

# Production stage
FROM node:18-alpine AS runner

WORKDIR /app

# Install dumb-init, ts-node, and OpenSSL libraries for Prisma
RUN apk add --no-cache dumb-init openssl openssl-dev && \
    npm install -g ts-node typescript

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy source files and dependencies (no build needed)
COPY --from=builder --chown=nodejs:nodejs /app/src/backend ./backend
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/src/backend/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /app/src/shared ./shared
COPY --from=builder --chown=nodejs:nodejs /app/src/prisma ./prisma

# Debug: Show what was copied
RUN echo "=== Runner stage contents ===" && \
    ls -la && \
    echo "=== Backend contents ===" && \
    ls -la backend/ || echo "No backend directory" && \
    echo "=== Shared contents ===" && \
    ls -la shared/ || echo "No shared directory"

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application using ts-node to run TypeScript directly
CMD ["dumb-init", "ts-node", "backend/src/index.ts"]
